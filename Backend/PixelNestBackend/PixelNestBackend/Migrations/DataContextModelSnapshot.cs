// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PixelNestBackend.Data;

#nullable disable

namespace PixelNestBackend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PixelNestBackend.Dto.LikeDto", b =>
                {
                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("LikeDto");
                });

            modelBuilder.Entity("PixelNestBackend.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCommentID")
                        .HasColumnType("int");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("TotalLikes")
                        .HasColumnType("int");

                    b.Property<int>("TotalReplies")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PixelNestBackend.Models.Follow", b =>
                {
                    b.Property<int>("UserFollowerID")
                        .HasColumnType("int");

                    b.Property<int>("UserFollowingID")
                        .HasColumnType("int");

                    b.Property<string>("FollowerUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowingUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserFollowerID", "UserFollowingID");

                    b.HasIndex("UserFollowingID");

                    b.ToTable("Follow");
                });

            modelBuilder.Entity("PixelNestBackend.Models.ImagePath", b =>
                {
                    b.Property<int>("PathID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PathID"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoDisplay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostID")
                        .HasColumnType("int");

                    b.Property<int?>("StoryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("PathID");

                    b.HasIndex("PostID");

                    b.HasIndex("StoryID");

                    b.ToTable("ImagePaths");
                });

            modelBuilder.Entity("PixelNestBackend.Models.LikedComments", b =>
                {
                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("LikeComments");
                });

            modelBuilder.Entity("PixelNestBackend.Models.LikedPosts", b =>
                {
                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateLiked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("LikedPosts");
                });

            modelBuilder.Entity("PixelNestBackend.Models.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostID"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalComments")
                        .HasColumnType("int");

                    b.Property<int>("TotalLikes")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("PixelNestBackend.Models.SavedPosts", b =>
                {
                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("SavedPosts");
                });

            modelBuilder.Entity("PixelNestBackend.Models.Story", b =>
                {
                    b.Property<int>("StoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoryID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("PixelNestBackend.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Followers")
                        .HasColumnType("int");

                    b.Property<int>("Following")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalLikes")
                        .HasColumnType("int");

                    b.Property<int>("TotalPosts")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PixelNestBackend.Models.Comment", b =>
                {
                    b.HasOne("PixelNestBackend.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PixelNestBackend.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PixelNestBackend.Models.Follow", b =>
                {
                    b.HasOne("PixelNestBackend.Models.User", "UserFollower")
                        .WithMany("FollowingsList")
                        .HasForeignKey("UserFollowerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PixelNestBackend.Models.User", "UserFollowing")
                        .WithMany("FollowersList")
                        .HasForeignKey("UserFollowingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFollower");

                    b.Navigation("UserFollowing");
                });

            modelBuilder.Entity("PixelNestBackend.Models.ImagePath", b =>
                {
                    b.HasOne("PixelNestBackend.Models.Post", "Post")
                        .WithMany("ImagePaths")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PixelNestBackend.Models.Story", "Story")
                        .WithMany("ImagePath")
                        .HasForeignKey("StoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("PixelNestBackend.Models.LikedComments", b =>
                {
                    b.HasOne("PixelNestBackend.Models.Comment", "Comment")
                        .WithMany("LikedComments")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PixelNestBackend.Models.User", "User")
                        .WithMany("LikedComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PixelNestBackend.Models.LikedPosts", b =>
                {
                    b.HasOne("PixelNestBackend.Models.Post", "Post")
                        .WithMany("LikedPosts")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PixelNestBackend.Models.User", "User")
                        .WithMany("LikedPosts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PixelNestBackend.Models.Post", b =>
                {
                    b.HasOne("PixelNestBackend.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PixelNestBackend.Models.SavedPosts", b =>
                {
                    b.HasOne("PixelNestBackend.Models.Post", "Post")
                        .WithMany("SavedPosts")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PixelNestBackend.Models.User", "User")
                        .WithMany("SavedPosts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PixelNestBackend.Models.Story", b =>
                {
                    b.HasOne("PixelNestBackend.Models.User", "User")
                        .WithMany("Stories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PixelNestBackend.Models.Comment", b =>
                {
                    b.Navigation("LikedComments");
                });

            modelBuilder.Entity("PixelNestBackend.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ImagePaths");

                    b.Navigation("LikedPosts");

                    b.Navigation("SavedPosts");
                });

            modelBuilder.Entity("PixelNestBackend.Models.Story", b =>
                {
                    b.Navigation("ImagePath");
                });

            modelBuilder.Entity("PixelNestBackend.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FollowersList");

                    b.Navigation("FollowingsList");

                    b.Navigation("LikedComments");

                    b.Navigation("LikedPosts");

                    b.Navigation("Posts");

                    b.Navigation("SavedPosts");

                    b.Navigation("Stories");
                });
#pragma warning restore 612, 618
        }
    }
}
